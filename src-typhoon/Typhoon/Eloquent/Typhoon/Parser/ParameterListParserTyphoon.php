<?php

/*
 * This file was generated by [Typhoon](https://github.com/eloquent/typhoon).
 *
 * Copyright Â© 2012 Erin Millard
 *
 * For the full copyright and license information, please view the
 * [LICENSE](https://raw.github.com/eloquent/typhoon/master/LICENSE)
 * file that is distributed with Typhoon.
 */

namespace Typhoon\Eloquent\Typhoon\Parser;

use Typhoon\Exception\MissingArgumentException;
use Typhoon\Exception\UnexpectedArgumentException;
use Typhoon\Exception\UnexpectedArgumentValueException;

class ParameterListParserTyphoon
{
    public function validateConstructor(array $arguments)
    {
        $argumentCount = count($arguments);

        if ($argumentCount > 0) {
            $check = function($argument, $index) {
                $check = function($value) {
                    return true;
                };
                if (!$check($argument)) {
                    throw new UnexpectedArgumentValueException('undefined', $index, $argument, 'mixed');
                }
            };
            for ($i = 0; $i < $argumentCount; $i ++) {
                $check($arguments[$i], $i);
            }
        }
    }

    public function typhaxParser(array $arguments)
    {
        if (count($arguments) > 0) {
            throw new UnexpectedArgumentException(0, $arguments[0]);
        }
    }

    public function parseBlockComment(array $arguments)
    {
        $argumentCount = count($arguments);
        if ($argumentCount < 1) {
            throw new MissingArgumentException('blockComment', 0, 'string');
        } elseif ($argumentCount > 2) {
            throw new UnexpectedArgumentException(2, $arguments[2]);
        }

        $check = function($argument, $index) {
            $check = function($value) {
                return is_string($value);
            };
            if (!$check($argument)) {
                throw new UnexpectedArgumentValueException('blockComment', $index, $argument, 'string');
            }
        };
        $check($arguments[0], 0);

        if ($argumentCount > 1) {
            $check = function($argument, $index) {
                $check = function($value) {
                    return $value instanceof \Eloquent\Blox\DocumentationBlockParser;
                };
                if (!$check($argument)) {
                    throw new UnexpectedArgumentValueException('documentationParser', $index, $argument, 'Eloquent\\Blox\\DocumentationBlockParser');
                }
            };
            $check($arguments[1], 1);
        }
    }

    public function visitDocumentationBlock(array $arguments)
    {
        $argumentCount = count($arguments);
        if ($argumentCount < 1) {
            throw new MissingArgumentException('documentationBlock', 0, 'Eloquent\\Blox\\AST\\DocumentationBlock');
        } elseif ($argumentCount > 1) {
            throw new UnexpectedArgumentException(1, $arguments[1]);
        }

        $check = function($argument, $index) {
            $check = function($value) {
                return $value instanceof \Eloquent\Blox\AST\DocumentationBlock;
            };
            if (!$check($argument)) {
                throw new UnexpectedArgumentValueException('documentationBlock', $index, $argument, 'Eloquent\\Blox\\AST\\DocumentationBlock');
            }
        };
        $check($arguments[0], 0);
    }

    public function visitDocumentationTag(array $arguments)
    {
        $argumentCount = count($arguments);
        if ($argumentCount < 1) {
            throw new MissingArgumentException('documentationTag', 0, 'Eloquent\\Blox\\AST\\DocumentationTag');
        } elseif ($argumentCount > 1) {
            throw new UnexpectedArgumentException(1, $arguments[1]);
        }

        $check = function($argument, $index) {
            $check = function($value) {
                return $value instanceof \Eloquent\Blox\AST\DocumentationTag;
            };
            if (!$check($argument)) {
                throw new UnexpectedArgumentValueException('documentationTag', $index, $argument, 'Eloquent\\Blox\\AST\\DocumentationTag');
            }
        };
        $check($arguments[0], 0);
    }

    public function parseType(array $arguments)
    {
        $argumentCount = count($arguments);
        if ($argumentCount < 2) {
            if ($argumentCount < 1) {
                throw new MissingArgumentException('content', 0, 'string');
            }
            throw new MissingArgumentException('position', 1, 'integer');
        } elseif ($argumentCount > 2) {
            throw new UnexpectedArgumentException(2, $arguments[2]);
        }

        $check = function($argument, $index) {
            $check = function($value) {
                return is_string($value);
            };
            if (!$check($argument)) {
                throw new UnexpectedArgumentValueException('content', $index, $argument, 'string');
            }
        };
        $check($arguments[0], 0);

        $check = function($argument, $index) {
            $check = function($value) {
                return is_integer($value);
            };
            if (!$check($argument)) {
                throw new UnexpectedArgumentValueException('position', $index, $argument, 'integer');
            }
        };
        $check($arguments[1], 1);
    }

    public function parseName(array $arguments)
    {
        $argumentCount = count($arguments);
        if ($argumentCount < 2) {
            if ($argumentCount < 1) {
                throw new MissingArgumentException('content', 0, 'string');
            }
            throw new MissingArgumentException('position', 1, 'integer');
        } elseif ($argumentCount > 2) {
            throw new UnexpectedArgumentException(2, $arguments[2]);
        }

        $check = function($argument, $index) {
            $check = function($value) {
                return is_string($value);
            };
            if (!$check($argument)) {
                throw new UnexpectedArgumentValueException('content', $index, $argument, 'string');
            }
        };
        $check($arguments[0], 0);

        $check = function($argument, $index) {
            $check = function($value) {
                return is_integer($value);
            };
            if (!$check($argument)) {
                throw new UnexpectedArgumentValueException('position', $index, $argument, 'integer');
            }
        };
        $check($arguments[1], 1);
    }

    public function parseDescription(array $arguments)
    {
        $argumentCount = count($arguments);
        if ($argumentCount < 2) {
            if ($argumentCount < 1) {
                throw new MissingArgumentException('content', 0, 'string');
            }
            throw new MissingArgumentException('position', 1, 'integer');
        } elseif ($argumentCount > 2) {
            throw new UnexpectedArgumentException(2, $arguments[2]);
        }

        $check = function($argument, $index) {
            $check = function($value) {
                return is_string($value);
            };
            if (!$check($argument)) {
                throw new UnexpectedArgumentValueException('content', $index, $argument, 'string');
            }
        };
        $check($arguments[0], 0);

        $check = function($argument, $index) {
            $check = function($value) {
                return is_integer($value);
            };
            if (!$check($argument)) {
                throw new UnexpectedArgumentValueException('position', $index, $argument, 'integer');
            }
        };
        $check($arguments[1], 1);
    }

    public function parseOptional(array $arguments)
    {
        $argumentCount = count($arguments);
        if ($argumentCount < 1) {
            throw new MissingArgumentException('content', 0, 'string');
        } elseif ($argumentCount > 1) {
            throw new UnexpectedArgumentException(1, $arguments[1]);
        }

        $check = function($argument, $index) {
            $check = function($value) {
                return is_string($value);
            };
            if (!$check($argument)) {
                throw new UnexpectedArgumentValueException('content', $index, $argument, 'string');
            }
        };
        $check($arguments[0], 0);
    }

    public function parseContent(array $arguments)
    {
        $argumentCount = count($arguments);
        if ($argumentCount < 5) {
            if ($argumentCount < 1) {
                throw new MissingArgumentException('content', 0, 'string');
            }
            if ($argumentCount < 2) {
                throw new MissingArgumentException('position', 1, 'integer');
            }
            if ($argumentCount < 3) {
                throw new MissingArgumentException('pattern', 2, 'string');
            }
            if ($argumentCount < 4) {
                throw new MissingArgumentException('optional', 3, 'boolean');
            }
            throw new MissingArgumentException('type', 4, 'string');
        } elseif ($argumentCount > 5) {
            throw new UnexpectedArgumentException(5, $arguments[5]);
        }

        $check = function($argument, $index) {
            $check = function($value) {
                return is_string($value);
            };
            if (!$check($argument)) {
                throw new UnexpectedArgumentValueException('content', $index, $argument, 'string');
            }
        };
        $check($arguments[0], 0);

        $check = function($argument, $index) {
            $check = function($value) {
                return is_integer($value);
            };
            if (!$check($argument)) {
                throw new UnexpectedArgumentValueException('position', $index, $argument, 'integer');
            }
        };
        $check($arguments[1], 1);

        $check = function($argument, $index) {
            $check = function($value) {
                return is_string($value);
            };
            if (!$check($argument)) {
                throw new UnexpectedArgumentValueException('pattern', $index, $argument, 'string');
            }
        };
        $check($arguments[2], 2);

        $check = function($argument, $index) {
            $check = function($value) {
                return is_bool($value);
            };
            if (!$check($argument)) {
                throw new UnexpectedArgumentValueException('optional', $index, $argument, 'boolean');
            }
        };
        $check($arguments[3], 3);

        $check = function($argument, $index) {
            $check = function($value) {
                return is_string($value);
            };
            if (!$check($argument)) {
                throw new UnexpectedArgumentValueException('type', $index, $argument, 'string');
            }
        };
        $check($arguments[4], 4);
    }
}
