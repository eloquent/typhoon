<?php

/*
 * This file was generated by [Typhoon](https://github.com/eloquent/typhoon).
 *
 * Copyright Â© 2012 Erin Millard
 *
 * For the full copyright and license information, please view the
 * [LICENSE](https://raw.github.com/eloquent/typhoon/master/LICENSE)
 * file that is distributed with Typhoon.
 */

namespace Typhoon\Eloquent\Typhoon\Generator;

use Typhoon\Exception\MissingArgumentException;
use Typhoon\Exception\UnexpectedArgumentException;
use Typhoon\Exception\UnexpectedArgumentValueException;
use Typhoon\Validator;

class ValidatorClassGeneratorTyphoon extends Validator
{
    public function validateConstructor(array $arguments)
    {
        $argumentCount = count($arguments);
        if ($argumentCount > 5) {
            throw new UnexpectedArgumentException(5, $arguments[5]);
        }

        if ($argumentCount > 0) {
            $check = function($argument, $index) {
                $check = function($value) {
                    $check = function($value) {
                        return $value instanceof \Eloquent\Typhoon\Parser\ParameterListParser;
                    };
                    if ($check($value)) {
                        return true;
                    }

                    $check = function($value) {
                        return $value === null;
                    };
                    if ($check($value)) {
                        return true;
                    }

                    return false;
                };
                if (!$check($argument)) {
                    throw new UnexpectedArgumentValueException('parser', $index, $argument, 'Eloquent\\Typhoon\\Parser\\ParameterListParser|null');
                }
            };
            $check($arguments[0], 0);
        }

        if ($argumentCount > 1) {
            $check = function($argument, $index) {
                $check = function($value) {
                    $check = function($value) {
                        return $value instanceof \Eloquent\Typhoon\Compiler\ParameterListCompiler;
                    };
                    if ($check($value)) {
                        return true;
                    }

                    $check = function($value) {
                        return $value === null;
                    };
                    if ($check($value)) {
                        return true;
                    }

                    return false;
                };
                if (!$check($argument)) {
                    throw new UnexpectedArgumentValueException('compiler', $index, $argument, 'Eloquent\\Typhoon\\Compiler\\ParameterListCompiler|null');
                }
            };
            $check($arguments[1], 1);
        }

        if ($argumentCount > 2) {
            $check = function($argument, $index) {
                $check = function($value) {
                    $check = function($value) {
                        return $value instanceof \Eloquent\Typhoon\ClassMapper\ClassMapper;
                    };
                    if ($check($value)) {
                        return true;
                    }

                    $check = function($value) {
                        return $value === null;
                    };
                    if ($check($value)) {
                        return true;
                    }

                    return false;
                };
                if (!$check($argument)) {
                    throw new UnexpectedArgumentValueException('classMapper', $index, $argument, 'Eloquent\\Typhoon\\ClassMapper\\ClassMapper|null');
                }
            };
            $check($arguments[2], 2);
        }

        if ($argumentCount > 3) {
            $check = function($argument, $index) {
                $check = function($value) {
                    return $value instanceof \Eloquent\Typhoon\Generator\NativeParameterListMergeTool;
                };
                if (!$check($argument)) {
                    throw new UnexpectedArgumentValueException('nativeMergeTool', $index, $argument, 'Eloquent\\Typhoon\\Generator\\NativeParameterListMergeTool');
                }
            };
            $check($arguments[3], 3);
        }

        if ($argumentCount > 4) {
            $check = function($argument, $index) {
                $check = function($value) {
                    $check = function($value) {
                        return $value instanceof \Icecave\Isolator\Isolator;
                    };
                    if ($check($value)) {
                        return true;
                    }

                    $check = function($value) {
                        return $value === null;
                    };
                    if ($check($value)) {
                        return true;
                    }

                    return false;
                };
                if (!$check($argument)) {
                    throw new UnexpectedArgumentValueException('isolator', $index, $argument, 'Icecave\\Isolator\\Isolator|null');
                }
            };
            $check($arguments[4], 4);
        }
    }

    public function parser(array $arguments)
    {
        if (count($arguments) > 0) {
            throw new UnexpectedArgumentException(0, $arguments[0]);
        }
    }

    public function compiler(array $arguments)
    {
        if (count($arguments) > 0) {
            throw new UnexpectedArgumentException(0, $arguments[0]);
        }
    }

    public function classMapper(array $arguments)
    {
        if (count($arguments) > 0) {
            throw new UnexpectedArgumentException(0, $arguments[0]);
        }
    }

    public function nativeMergeTool(array $arguments)
    {
        if (count($arguments) > 0) {
            throw new UnexpectedArgumentException(0, $arguments[0]);
        }
    }

    public function generate(array $arguments)
    {
        $argumentCount = count($arguments);
        if ($argumentCount < 1) {
            throw new MissingArgumentException('classDefinition', 0, 'Eloquent\\Typhoon\\ClassMapper\\ClassDefinition');
        } elseif ($argumentCount > 3) {
            throw new UnexpectedArgumentException(3, $arguments[3]);
        }

        $check = function($argument, $index) {
            $check = function($value) {
                return $value instanceof \Eloquent\Typhoon\ClassMapper\ClassDefinition;
            };
            if (!$check($argument)) {
                throw new UnexpectedArgumentValueException('classDefinition', $index, $argument, 'Eloquent\\Typhoon\\ClassMapper\\ClassDefinition');
            }
        };
        $check($arguments[0], 0);

        if ($argumentCount > 1) {
            $check = function($argument, $index) {
                $check = function($value) {
                    $check = function($value) {
                        return is_string($value);
                    };
                    if ($check($value)) {
                        return true;
                    }

                    $check = function($value) {
                        return $value === null;
                    };
                    if ($check($value)) {
                        return true;
                    }

                    return false;
                };
                if (!$check($argument)) {
                    throw new UnexpectedArgumentValueException('namespaceName', $index, $argument, 'string|null');
                }
            };
            $check($arguments[1], 1);
        }

        if ($argumentCount > 2) {
            $check = function($argument, $index) {
                $check = function($value) {
                    $check = function($value) {
                        return is_string($value);
                    };
                    if ($check($value)) {
                        return true;
                    }

                    $check = function($value) {
                        return $value === null;
                    };
                    if ($check($value)) {
                        return true;
                    }

                    return false;
                };
                if (!$check($argument)) {
                    throw new UnexpectedArgumentValueException('className', $index, $argument, 'string|null');
                }
            };
            $check($arguments[2], 2);
        }
    }

    public function generateFromSource(array $arguments)
    {
        $argumentCount = count($arguments);
        if ($argumentCount < 2) {
            if ($argumentCount < 1) {
                throw new MissingArgumentException('sourceClassName', 0, 'string');
            }
            throw new MissingArgumentException('source', 1, 'string');
        } elseif ($argumentCount > 4) {
            throw new UnexpectedArgumentException(4, $arguments[4]);
        }

        $check = function($argument, $index) {
            $check = function($value) {
                return is_string($value);
            };
            if (!$check($argument)) {
                throw new UnexpectedArgumentValueException('sourceClassName', $index, $argument, 'string');
            }
        };
        $check($arguments[0], 0);

        $check = function($argument, $index) {
            $check = function($value) {
                return is_string($value);
            };
            if (!$check($argument)) {
                throw new UnexpectedArgumentValueException('source', $index, $argument, 'string');
            }
        };
        $check($arguments[1], 1);

        if ($argumentCount > 2) {
            $check = function($argument, $index) {
                $check = function($value) {
                    $check = function($value) {
                        return is_string($value);
                    };
                    if ($check($value)) {
                        return true;
                    }

                    $check = function($value) {
                        return $value === null;
                    };
                    if ($check($value)) {
                        return true;
                    }

                    return false;
                };
                if (!$check($argument)) {
                    throw new UnexpectedArgumentValueException('namespaceName', $index, $argument, 'string|null');
                }
            };
            $check($arguments[2], 2);
        }

        if ($argumentCount > 3) {
            $check = function($argument, $index) {
                $check = function($value) {
                    $check = function($value) {
                        return is_string($value);
                    };
                    if ($check($value)) {
                        return true;
                    }

                    $check = function($value) {
                        return $value === null;
                    };
                    if ($check($value)) {
                        return true;
                    }

                    return false;
                };
                if (!$check($argument)) {
                    throw new UnexpectedArgumentValueException('className', $index, $argument, 'string|null');
                }
            };
            $check($arguments[3], 3);
        }
    }

    public function generateFromFile(array $arguments)
    {
        $argumentCount = count($arguments);
        if ($argumentCount < 2) {
            if ($argumentCount < 1) {
                throw new MissingArgumentException('sourceClassName', 0, 'string');
            }
            throw new MissingArgumentException('path', 1, 'string');
        } elseif ($argumentCount > 4) {
            throw new UnexpectedArgumentException(4, $arguments[4]);
        }

        $check = function($argument, $index) {
            $check = function($value) {
                return is_string($value);
            };
            if (!$check($argument)) {
                throw new UnexpectedArgumentValueException('sourceClassName', $index, $argument, 'string');
            }
        };
        $check($arguments[0], 0);

        $check = function($argument, $index) {
            $check = function($value) {
                return is_string($value);
            };
            if (!$check($argument)) {
                throw new UnexpectedArgumentValueException('path', $index, $argument, 'string');
            }
        };
        $check($arguments[1], 1);

        if ($argumentCount > 2) {
            $check = function($argument, $index) {
                $check = function($value) {
                    $check = function($value) {
                        return is_string($value);
                    };
                    if ($check($value)) {
                        return true;
                    }

                    $check = function($value) {
                        return $value === null;
                    };
                    if ($check($value)) {
                        return true;
                    }

                    return false;
                };
                if (!$check($argument)) {
                    throw new UnexpectedArgumentValueException('namespaceName', $index, $argument, 'string|null');
                }
            };
            $check($arguments[2], 2);
        }

        if ($argumentCount > 3) {
            $check = function($argument, $index) {
                $check = function($value) {
                    $check = function($value) {
                        return is_string($value);
                    };
                    if ($check($value)) {
                        return true;
                    }

                    $check = function($value) {
                        return $value === null;
                    };
                    if ($check($value)) {
                        return true;
                    }

                    return false;
                };
                if (!$check($argument)) {
                    throw new UnexpectedArgumentValueException('className', $index, $argument, 'string|null');
                }
            };
            $check($arguments[3], 3);
        }
    }

    public function generateFromClass(array $arguments)
    {
        $argumentCount = count($arguments);
        if ($argumentCount < 1) {
            throw new MissingArgumentException('class', 0, 'ReflectionClass');
        } elseif ($argumentCount > 3) {
            throw new UnexpectedArgumentException(3, $arguments[3]);
        }

        $check = function($argument, $index) {
            $check = function($value) {
                return $value instanceof \ReflectionClass;
            };
            if (!$check($argument)) {
                throw new UnexpectedArgumentValueException('class', $index, $argument, 'ReflectionClass');
            }
        };
        $check($arguments[0], 0);

        if ($argumentCount > 1) {
            $check = function($argument, $index) {
                $check = function($value) {
                    $check = function($value) {
                        return is_string($value);
                    };
                    if ($check($value)) {
                        return true;
                    }

                    $check = function($value) {
                        return $value === null;
                    };
                    if ($check($value)) {
                        return true;
                    }

                    return false;
                };
                if (!$check($argument)) {
                    throw new UnexpectedArgumentValueException('namespaceName', $index, $argument, 'string|null');
                }
            };
            $check($arguments[1], 1);
        }

        if ($argumentCount > 2) {
            $check = function($argument, $index) {
                $check = function($value) {
                    $check = function($value) {
                        return is_string($value);
                    };
                    if ($check($value)) {
                        return true;
                    }

                    $check = function($value) {
                        return $value === null;
                    };
                    if ($check($value)) {
                        return true;
                    }

                    return false;
                };
                if (!$check($argument)) {
                    throw new UnexpectedArgumentValueException('className', $index, $argument, 'string|null');
                }
            };
            $check($arguments[2], 2);
        }
    }

    public function methods(array $arguments)
    {
        $argumentCount = count($arguments);
        if ($argumentCount < 1) {
            throw new MissingArgumentException('classDefinition', 0, 'Eloquent\\Typhoon\\ClassMapper\\ClassDefinition');
        } elseif ($argumentCount > 1) {
            throw new UnexpectedArgumentException(1, $arguments[1]);
        }

        $check = function($argument, $index) {
            $check = function($value) {
                return $value instanceof \Eloquent\Typhoon\ClassMapper\ClassDefinition;
            };
            if (!$check($argument)) {
                throw new UnexpectedArgumentValueException('classDefinition', $index, $argument, 'Eloquent\\Typhoon\\ClassMapper\\ClassDefinition');
            }
        };
        $check($arguments[0], 0);
    }

    public function generateMethod(array $arguments)
    {
        $argumentCount = count($arguments);
        if ($argumentCount < 2) {
            if ($argumentCount < 1) {
                throw new MissingArgumentException('method', 0, 'ReflectionMethod');
            }
            throw new MissingArgumentException('classDefinition', 1, 'Eloquent\\Typhoon\\ClassMapper\\ClassDefinition');
        } elseif ($argumentCount > 2) {
            throw new UnexpectedArgumentException(2, $arguments[2]);
        }

        $check = function($argument, $index) {
            $check = function($value) {
                return $value instanceof \ReflectionMethod;
            };
            if (!$check($argument)) {
                throw new UnexpectedArgumentValueException('method', $index, $argument, 'ReflectionMethod');
            }
        };
        $check($arguments[0], 0);

        $check = function($argument, $index) {
            $check = function($value) {
                return $value instanceof \Eloquent\Typhoon\ClassMapper\ClassDefinition;
            };
            if (!$check($argument)) {
                throw new UnexpectedArgumentValueException('classDefinition', $index, $argument, 'Eloquent\\Typhoon\\ClassMapper\\ClassDefinition');
            }
        };
        $check($arguments[1], 1);
    }

    public function parameterList(array $arguments)
    {
        $argumentCount = count($arguments);
        if ($argumentCount < 2) {
            if ($argumentCount < 1) {
                throw new MissingArgumentException('method', 0, 'ReflectionMethod');
            }
            throw new MissingArgumentException('classDefinition', 1, 'Eloquent\\Typhoon\\ClassMapper\\ClassDefinition');
        } elseif ($argumentCount > 2) {
            throw new UnexpectedArgumentException(2, $arguments[2]);
        }

        $check = function($argument, $index) {
            $check = function($value) {
                return $value instanceof \ReflectionMethod;
            };
            if (!$check($argument)) {
                throw new UnexpectedArgumentValueException('method', $index, $argument, 'ReflectionMethod');
            }
        };
        $check($arguments[0], 0);

        $check = function($argument, $index) {
            $check = function($value) {
                return $value instanceof \Eloquent\Typhoon\ClassMapper\ClassDefinition;
            };
            if (!$check($argument)) {
                throw new UnexpectedArgumentValueException('classDefinition', $index, $argument, 'Eloquent\\Typhoon\\ClassMapper\\ClassDefinition');
            }
        };
        $check($arguments[1], 1);
    }

    public function classNameResolver(array $arguments)
    {
        $argumentCount = count($arguments);
        if ($argumentCount < 1) {
            throw new MissingArgumentException('classDefinition', 0, 'Eloquent\\Typhoon\\ClassMapper\\ClassDefinition');
        } elseif ($argumentCount > 1) {
            throw new UnexpectedArgumentException(1, $arguments[1]);
        }

        $check = function($argument, $index) {
            $check = function($value) {
                return $value instanceof \Eloquent\Typhoon\ClassMapper\ClassDefinition;
            };
            if (!$check($argument)) {
                throw new UnexpectedArgumentValueException('classDefinition', $index, $argument, 'Eloquent\\Typhoon\\ClassMapper\\ClassDefinition');
            }
        };
        $check($arguments[0], 0);
    }

    public function indent(array $arguments)
    {
        $argumentCount = count($arguments);
        if ($argumentCount < 1) {
            throw new MissingArgumentException('content', 0, 'string');
        } elseif ($argumentCount > 2) {
            throw new UnexpectedArgumentException(2, $arguments[2]);
        }

        $check = function($argument, $index) {
            $check = function($value) {
                return is_string($value);
            };
            if (!$check($argument)) {
                throw new UnexpectedArgumentValueException('content', $index, $argument, 'string');
            }
        };
        $check($arguments[0], 0);

        if ($argumentCount > 1) {
            $check = function($argument, $index) {
                $check = function($value) {
                    return is_integer($value);
                };
                if (!$check($argument)) {
                    throw new UnexpectedArgumentValueException('depth', $index, $argument, 'integer');
                }
            };
            $check($arguments[1], 1);
        }
    }
}
