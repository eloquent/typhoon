<?php

/*
 * This file was generated by [Typhoon](https://github.com/eloquent/typhoon).
 *
 * Copyright Â© 2012 Erin Millard
 *
 * For the full copyright and license information, please view the
 * [LICENSE](https://raw.github.com/eloquent/typhoon/master/LICENSE)
 * file that is distributed with Typhoon.
 */

namespace Typhoon\Eloquent\Typhoon\Compiler;

use Typhoon\Exception\MissingArgumentException;
use Typhoon\Exception\UnexpectedArgumentException;
use Typhoon\Exception\UnexpectedArgumentValueException;
use Typhoon\Validator;

class TyphaxCompilerTyphoon extends Validator
{
    public function validateConstruct(array $arguments)
    {
        if (count($arguments) > 0) {
            throw new UnexpectedArgumentException(0, $arguments[0]);
        }
    }

    public function visitAndType(array $arguments)
    {
        $argumentCount = count($arguments);
        if ($argumentCount < 1) {
            throw new MissingArgumentException('type', 0, 'mixed');
        } elseif ($argumentCount > 1) {
            throw new UnexpectedArgumentException(1, $arguments[1]);
        }

        $check = function($argument, $index) {
            $check = function($value) {
                return true;
            };
            if (!$check($argument)) {
                throw new UnexpectedArgumentValueException('type', $index, $argument, 'mixed');
            }
        };
        $check($arguments[0], 0);
    }

    public function visitArrayType(array $arguments)
    {
        $argumentCount = count($arguments);
        if ($argumentCount < 1) {
            throw new MissingArgumentException('type', 0, 'mixed');
        } elseif ($argumentCount > 1) {
            throw new UnexpectedArgumentException(1, $arguments[1]);
        }

        $check = function($argument, $index) {
            $check = function($value) {
                return true;
            };
            if (!$check($argument)) {
                throw new UnexpectedArgumentValueException('type', $index, $argument, 'mixed');
            }
        };
        $check($arguments[0], 0);
    }

    public function visitBooleanType(array $arguments)
    {
        $argumentCount = count($arguments);
        if ($argumentCount < 1) {
            throw new MissingArgumentException('type', 0, 'mixed');
        } elseif ($argumentCount > 1) {
            throw new UnexpectedArgumentException(1, $arguments[1]);
        }

        $check = function($argument, $index) {
            $check = function($value) {
                return true;
            };
            if (!$check($argument)) {
                throw new UnexpectedArgumentValueException('type', $index, $argument, 'mixed');
            }
        };
        $check($arguments[0], 0);
    }

    public function visitCallableType(array $arguments)
    {
        $argumentCount = count($arguments);
        if ($argumentCount < 1) {
            throw new MissingArgumentException('type', 0, 'mixed');
        } elseif ($argumentCount > 1) {
            throw new UnexpectedArgumentException(1, $arguments[1]);
        }

        $check = function($argument, $index) {
            $check = function($value) {
                return true;
            };
            if (!$check($argument)) {
                throw new UnexpectedArgumentValueException('type', $index, $argument, 'mixed');
            }
        };
        $check($arguments[0], 0);
    }

    public function visitFloatType(array $arguments)
    {
        $argumentCount = count($arguments);
        if ($argumentCount < 1) {
            throw new MissingArgumentException('type', 0, 'mixed');
        } elseif ($argumentCount > 1) {
            throw new UnexpectedArgumentException(1, $arguments[1]);
        }

        $check = function($argument, $index) {
            $check = function($value) {
                return true;
            };
            if (!$check($argument)) {
                throw new UnexpectedArgumentValueException('type', $index, $argument, 'mixed');
            }
        };
        $check($arguments[0], 0);
    }

    public function visitIntegerType(array $arguments)
    {
        $argumentCount = count($arguments);
        if ($argumentCount < 1) {
            throw new MissingArgumentException('type', 0, 'mixed');
        } elseif ($argumentCount > 1) {
            throw new UnexpectedArgumentException(1, $arguments[1]);
        }

        $check = function($argument, $index) {
            $check = function($value) {
                return true;
            };
            if (!$check($argument)) {
                throw new UnexpectedArgumentValueException('type', $index, $argument, 'mixed');
            }
        };
        $check($arguments[0], 0);
    }

    public function visitMixedType(array $arguments)
    {
        $argumentCount = count($arguments);
        if ($argumentCount < 1) {
            throw new MissingArgumentException('type', 0, 'mixed');
        } elseif ($argumentCount > 1) {
            throw new UnexpectedArgumentException(1, $arguments[1]);
        }

        $check = function($argument, $index) {
            $check = function($value) {
                return true;
            };
            if (!$check($argument)) {
                throw new UnexpectedArgumentValueException('type', $index, $argument, 'mixed');
            }
        };
        $check($arguments[0], 0);
    }

    public function visitNullType(array $arguments)
    {
        $argumentCount = count($arguments);
        if ($argumentCount < 1) {
            throw new MissingArgumentException('type', 0, 'mixed');
        } elseif ($argumentCount > 1) {
            throw new UnexpectedArgumentException(1, $arguments[1]);
        }

        $check = function($argument, $index) {
            $check = function($value) {
                return true;
            };
            if (!$check($argument)) {
                throw new UnexpectedArgumentValueException('type', $index, $argument, 'mixed');
            }
        };
        $check($arguments[0], 0);
    }

    public function visitNumericType(array $arguments)
    {
        $argumentCount = count($arguments);
        if ($argumentCount < 1) {
            throw new MissingArgumentException('type', 0, 'mixed');
        } elseif ($argumentCount > 1) {
            throw new UnexpectedArgumentException(1, $arguments[1]);
        }

        $check = function($argument, $index) {
            $check = function($value) {
                return true;
            };
            if (!$check($argument)) {
                throw new UnexpectedArgumentValueException('type', $index, $argument, 'mixed');
            }
        };
        $check($arguments[0], 0);
    }

    public function visitObjectType(array $arguments)
    {
        $argumentCount = count($arguments);
        if ($argumentCount < 1) {
            throw new MissingArgumentException('type', 0, 'mixed');
        } elseif ($argumentCount > 1) {
            throw new UnexpectedArgumentException(1, $arguments[1]);
        }

        $check = function($argument, $index) {
            $check = function($value) {
                return true;
            };
            if (!$check($argument)) {
                throw new UnexpectedArgumentValueException('type', $index, $argument, 'mixed');
            }
        };
        $check($arguments[0], 0);
    }

    public function visitOrType(array $arguments)
    {
        $argumentCount = count($arguments);
        if ($argumentCount < 1) {
            throw new MissingArgumentException('type', 0, 'mixed');
        } elseif ($argumentCount > 1) {
            throw new UnexpectedArgumentException(1, $arguments[1]);
        }

        $check = function($argument, $index) {
            $check = function($value) {
                return true;
            };
            if (!$check($argument)) {
                throw new UnexpectedArgumentValueException('type', $index, $argument, 'mixed');
            }
        };
        $check($arguments[0], 0);
    }

    public function visitResourceType(array $arguments)
    {
        $argumentCount = count($arguments);
        if ($argumentCount < 1) {
            throw new MissingArgumentException('type', 0, 'mixed');
        } elseif ($argumentCount > 1) {
            throw new UnexpectedArgumentException(1, $arguments[1]);
        }

        $check = function($argument, $index) {
            $check = function($value) {
                return true;
            };
            if (!$check($argument)) {
                throw new UnexpectedArgumentValueException('type', $index, $argument, 'mixed');
            }
        };
        $check($arguments[0], 0);
    }

    public function visitStreamType(array $arguments)
    {
        $argumentCount = count($arguments);
        if ($argumentCount < 1) {
            throw new MissingArgumentException('type', 0, 'mixed');
        } elseif ($argumentCount > 1) {
            throw new UnexpectedArgumentException(1, $arguments[1]);
        }

        $check = function($argument, $index) {
            $check = function($value) {
                return true;
            };
            if (!$check($argument)) {
                throw new UnexpectedArgumentValueException('type', $index, $argument, 'mixed');
            }
        };
        $check($arguments[0], 0);
    }

    public function visitStringType(array $arguments)
    {
        $argumentCount = count($arguments);
        if ($argumentCount < 1) {
            throw new MissingArgumentException('type', 0, 'mixed');
        } elseif ($argumentCount > 1) {
            throw new UnexpectedArgumentException(1, $arguments[1]);
        }

        $check = function($argument, $index) {
            $check = function($value) {
                return true;
            };
            if (!$check($argument)) {
                throw new UnexpectedArgumentValueException('type', $index, $argument, 'mixed');
            }
        };
        $check($arguments[0], 0);
    }

    public function visitStringableType(array $arguments)
    {
        $argumentCount = count($arguments);
        if ($argumentCount < 1) {
            throw new MissingArgumentException('type', 0, 'mixed');
        } elseif ($argumentCount > 1) {
            throw new UnexpectedArgumentException(1, $arguments[1]);
        }

        $check = function($argument, $index) {
            $check = function($value) {
                return true;
            };
            if (!$check($argument)) {
                throw new UnexpectedArgumentValueException('type', $index, $argument, 'mixed');
            }
        };
        $check($arguments[0], 0);
    }

    public function visitTraversableType(array $arguments)
    {
        $argumentCount = count($arguments);
        if ($argumentCount < 1) {
            throw new MissingArgumentException('type', 0, 'mixed');
        } elseif ($argumentCount > 1) {
            throw new UnexpectedArgumentException(1, $arguments[1]);
        }

        $check = function($argument, $index) {
            $check = function($value) {
                return true;
            };
            if (!$check($argument)) {
                throw new UnexpectedArgumentValueException('type', $index, $argument, 'mixed');
            }
        };
        $check($arguments[0], 0);
    }

    public function visitTupleType(array $arguments)
    {
        $argumentCount = count($arguments);
        if ($argumentCount < 1) {
            throw new MissingArgumentException('type', 0, 'mixed');
        } elseif ($argumentCount > 1) {
            throw new UnexpectedArgumentException(1, $arguments[1]);
        }

        $check = function($argument, $index) {
            $check = function($value) {
                return true;
            };
            if (!$check($argument)) {
                throw new UnexpectedArgumentValueException('type', $index, $argument, 'mixed');
            }
        };
        $check($arguments[0], 0);
    }

    public function createCallback(array $arguments)
    {
        $argumentCount = count($arguments);
        if ($argumentCount < 1) {
            throw new MissingArgumentException('content', 0, 'string');
        } elseif ($argumentCount > 1) {
            throw new UnexpectedArgumentException(1, $arguments[1]);
        }

        $check = function($argument, $index) {
            $check = function($value) {
                return is_string($value);
            };
            if (!$check($argument)) {
                throw new UnexpectedArgumentValueException('content', $index, $argument, 'string');
            }
        };
        $check($arguments[0], 0);
    }

    public function indent(array $arguments)
    {
        $argumentCount = count($arguments);
        if ($argumentCount < 1) {
            throw new MissingArgumentException('content', 0, 'string');
        } elseif ($argumentCount > 2) {
            throw new UnexpectedArgumentException(2, $arguments[2]);
        }

        $check = function($argument, $index) {
            $check = function($value) {
                return is_string($value);
            };
            if (!$check($argument)) {
                throw new UnexpectedArgumentValueException('content', $index, $argument, 'string');
            }
        };
        $check($arguments[0], 0);

        if ($argumentCount > 1) {
            $check = function($argument, $index) {
                $check = function($value) {
                    return is_integer($value);
                };
                if (!$check($argument)) {
                    throw new UnexpectedArgumentValueException('depth', $index, $argument, 'integer');
                }
            };
            $check($arguments[1], 1);
        }
    }
}
