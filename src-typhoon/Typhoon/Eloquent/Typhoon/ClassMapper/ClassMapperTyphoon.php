<?php

/*
 * This file was generated by [Typhoon](https://github.com/eloquent/typhoon).
 *
 * Copyright Â© 2012 Erin Millard
 *
 * For the full copyright and license information, please view the
 * [LICENSE](https://raw.github.com/eloquent/typhoon/master/LICENSE)
 * file that is distributed with Typhoon.
 */

namespace Typhoon\Eloquent\Typhoon\ClassMapper;

use Typhoon\Exception\MissingArgumentException;
use Typhoon\Exception\UnexpectedArgumentException;
use Typhoon\Exception\UnexpectedArgumentValueException;

class ClassMapperTyphoon
{
    public function validateConstructor(array $arguments)
    {
        $argumentCount = count($arguments);
        if ($argumentCount > 1) {
            throw new UnexpectedArgumentException(1, $arguments[1]);
        }

        if ($argumentCount > 0) {
            $check = function($argument, $index) {
                $check = function($value) {
                    return $value instanceof \Icecave\Isolator\Isolator;
                };
                if (!$check($argument)) {
                    throw new UnexpectedArgumentValueException('isolator', $index, $argument, 'Eloquent\\Typhax\\Type\\ObjectType');
                }
            };
            $check($arguments[0], 0);
        }
    }

    public function classesByDirectory(array $arguments)
    {
        $argumentCount = count($arguments);
        if ($argumentCount < 1) {
            throw new MissingArgumentException('directoryPath', 0, 'Eloquent\\Typhax\\Type\\StringType');
        } elseif ($argumentCount > 1) {
            throw new UnexpectedArgumentException(1, $arguments[1]);
        }

        $check = function($argument, $index) {
            $check = function($value) {
                return is_string($value);
            };
            if (!$check($argument)) {
                throw new UnexpectedArgumentValueException('directoryPath', $index, $argument, 'Eloquent\\Typhax\\Type\\StringType');
            }
        };
        $check($arguments[0], 0);
    }

    public function classesByFile(array $arguments)
    {
        $argumentCount = count($arguments);
        if ($argumentCount < 1) {
            throw new MissingArgumentException('filePath', 0, 'Eloquent\\Typhax\\Type\\StringType');
        } elseif ($argumentCount > 1) {
            throw new UnexpectedArgumentException(1, $arguments[1]);
        }

        $check = function($argument, $index) {
            $check = function($value) {
                return is_string($value);
            };
            if (!$check($argument)) {
                throw new UnexpectedArgumentValueException('filePath', $index, $argument, 'Eloquent\\Typhax\\Type\\StringType');
            }
        };
        $check($arguments[0], 0);
    }

    public function classesBySource(array $arguments)
    {
        $argumentCount = count($arguments);
        if ($argumentCount < 1) {
            throw new MissingArgumentException('source', 0, 'Eloquent\\Typhax\\Type\\StringType');
        } elseif ($argumentCount > 1) {
            throw new UnexpectedArgumentException(1, $arguments[1]);
        }

        $check = function($argument, $index) {
            $check = function($value) {
                return is_string($value);
            };
            if (!$check($argument)) {
                throw new UnexpectedArgumentValueException('source', $index, $argument, 'Eloquent\\Typhax\\Type\\StringType');
            }
        };
        $check($arguments[0], 0);
    }

    public function classBySource(array $arguments)
    {
        $argumentCount = count($arguments);
        if ($argumentCount < 2) {
            if ($argumentCount < 1) {
                throw new MissingArgumentException('className', 0, 'Eloquent\\Typhax\\Type\\StringType');
            }
            throw new MissingArgumentException('source', 1, 'Eloquent\\Typhax\\Type\\StringType');
        } elseif ($argumentCount > 2) {
            throw new UnexpectedArgumentException(2, $arguments[2]);
        }

        $check = function($argument, $index) {
            $check = function($value) {
                return is_string($value);
            };
            if (!$check($argument)) {
                throw new UnexpectedArgumentValueException('className', $index, $argument, 'Eloquent\\Typhax\\Type\\StringType');
            }
        };
        $check($arguments[0], 0);

        $check = function($argument, $index) {
            $check = function($value) {
                return is_string($value);
            };
            if (!$check($argument)) {
                throw new UnexpectedArgumentValueException('source', $index, $argument, 'Eloquent\\Typhax\\Type\\StringType');
            }
        };
        $check($arguments[1], 1);
    }

    public function parseNamespaceName(array $arguments)
    {
        $argumentCount = count($arguments);
        if ($argumentCount < 1) {
            throw new MissingArgumentException('tokens', 0, 'Eloquent\\Typhax\\Type\\TraversableType');
        } elseif ($argumentCount > 1) {
            throw new UnexpectedArgumentException(1, $arguments[1]);
        }

        $check = function($argument, $index) {
            $check = function($value) {
                $primaryCheck = function($value) {
                    return is_array($value);
                };
                if (!$primaryCheck($value)) {
                    return false;
                }

                $keyCheck = function($value) {
                    return true;
                };
                $valueCheck = function($value) {
                    $check = function($value) {
                        return is_string($value);
                    };
                    if ($check($value)) {
                        return true;
                    }

                    $check = function($value) {
                        return is_array($value);
                    };
                    if ($check($value)) {
                        return true;
                    }

                    return false;
                };
                foreach ($value as $key => $subValue) {
                    if (!$keyCheck($key)) {
                        return false;
                    }
                    if (!$valueCheck($subValue)) {
                        return false;
                    }
                }

                return true;
            };
            if (!$check($argument)) {
                throw new UnexpectedArgumentValueException('tokens', $index, $argument, 'Eloquent\\Typhax\\Type\\TraversableType');
            }
        };
        $check($arguments[0], 0);
    }

    public function parseUsedClass(array $arguments)
    {
        $argumentCount = count($arguments);
        if ($argumentCount < 1) {
            throw new MissingArgumentException('tokens', 0, 'Eloquent\\Typhax\\Type\\TraversableType');
        } elseif ($argumentCount > 1) {
            throw new UnexpectedArgumentException(1, $arguments[1]);
        }

        $check = function($argument, $index) {
            $check = function($value) {
                $primaryCheck = function($value) {
                    return is_array($value);
                };
                if (!$primaryCheck($value)) {
                    return false;
                }

                $keyCheck = function($value) {
                    return true;
                };
                $valueCheck = function($value) {
                    $check = function($value) {
                        return is_string($value);
                    };
                    if ($check($value)) {
                        return true;
                    }

                    $check = function($value) {
                        return is_array($value);
                    };
                    if ($check($value)) {
                        return true;
                    }

                    return false;
                };
                foreach ($value as $key => $subValue) {
                    if (!$keyCheck($key)) {
                        return false;
                    }
                    if (!$valueCheck($subValue)) {
                        return false;
                    }
                }

                return true;
            };
            if (!$check($argument)) {
                throw new UnexpectedArgumentValueException('tokens', $index, $argument, 'Eloquent\\Typhax\\Type\\TraversableType');
            }
        };
        $check($arguments[0], 0);
    }

    public function parseClassName(array $arguments)
    {
        $argumentCount = count($arguments);
        if ($argumentCount < 1) {
            throw new MissingArgumentException('tokens', 0, 'Eloquent\\Typhax\\Type\\TraversableType');
        } elseif ($argumentCount > 1) {
            throw new UnexpectedArgumentException(1, $arguments[1]);
        }

        $check = function($argument, $index) {
            $check = function($value) {
                $primaryCheck = function($value) {
                    return is_array($value);
                };
                if (!$primaryCheck($value)) {
                    return false;
                }

                $keyCheck = function($value) {
                    return true;
                };
                $valueCheck = function($value) {
                    $check = function($value) {
                        return is_string($value);
                    };
                    if ($check($value)) {
                        return true;
                    }

                    $check = function($value) {
                        return is_array($value);
                    };
                    if ($check($value)) {
                        return true;
                    }

                    return false;
                };
                foreach ($value as $key => $subValue) {
                    if (!$keyCheck($key)) {
                        return false;
                    }
                    if (!$valueCheck($subValue)) {
                        return false;
                    }
                }

                return true;
            };
            if (!$check($argument)) {
                throw new UnexpectedArgumentValueException('tokens', $index, $argument, 'Eloquent\\Typhax\\Type\\TraversableType');
            }
        };
        $check($arguments[0], 0);
    }

    public function sourceTokens(array $arguments)
    {
        $argumentCount = count($arguments);
        if ($argumentCount < 1) {
            throw new MissingArgumentException('source', 0, 'Eloquent\\Typhax\\Type\\StringType');
        } elseif ($argumentCount > 1) {
            throw new UnexpectedArgumentException(1, $arguments[1]);
        }

        $check = function($argument, $index) {
            $check = function($value) {
                return is_string($value);
            };
            if (!$check($argument)) {
                throw new UnexpectedArgumentValueException('source', $index, $argument, 'Eloquent\\Typhax\\Type\\StringType');
            }
        };
        $check($arguments[0], 0);
    }

    public function fileIterator(array $arguments)
    {
        $argumentCount = count($arguments);
        if ($argumentCount < 1) {
            throw new MissingArgumentException('directoryPath', 0, 'Eloquent\\Typhax\\Type\\StringType');
        } elseif ($argumentCount > 1) {
            throw new UnexpectedArgumentException(1, $arguments[1]);
        }

        $check = function($argument, $index) {
            $check = function($value) {
                return is_string($value);
            };
            if (!$check($argument)) {
                throw new UnexpectedArgumentValueException('directoryPath', $index, $argument, 'Eloquent\\Typhax\\Type\\StringType');
            }
        };
        $check($arguments[0], 0);
    }
}
