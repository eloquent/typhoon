<?php

/*
 * This file is part of the Typhoon package.
 *
 * Copyright Â© 2012 Erin Millard
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Eloquent\Typhoon\Configuration;

use JsonSchema\Validator;
use stdClass;
use Typhoon\Typhoon;

class ConfigurationValidator
{
    /**
     * @param stdClass|null $schema
     * @param Validator|null $schemaValidator
     */
    public function __construct(
        stdClass $schema = null,
        Validator $schemaValidator = null
    ) {
        $this->typhoon = Typhoon::get(__CLASS__, func_get_args());
        if (null === $schema) {
            $schema = $this->defaultSchema();
        }
        if (null === $schemaValidator) {
            $schemaValidator = new Validator;
        }

        $this->schema = $schema;
        $this->schemaValidator = $schemaValidator;
    }

    /**
     * @return stdClass
     */
    public function schema()
    {
        $this->typhoon->schema(func_get_args());

        return $this->schema;
    }

    /**
     * @return Validator
     */
    public function schemaValidator()
    {
        $this->typhoon->schemaValidator(func_get_args());

        return $this->schemaValidator;
    }

    /**
     * @param stdClass $configuration
     */
    public function validate(stdClass $configuration)
    {
        $this->schemaValidator()->reset();
        $this->schemaValidator()->check(
            $configuration,
            $this->schema()
        );

        if ($this->schemaValidator()->isValid()) {
            return;
        }

        $errors = $this->schemaValidator()->getErrors();
        $error = array_shift($errors);

        throw new Exception\InvalidConfigurationException(
            $error['property'],
            $error['message']
        );
    }

    /**
     * @return stdClass
     */
    protected function defaultSchema()
    {
        $this->typhoon->defaultSchema(func_get_args());

        $schema = new stdClass;
        $schema->name = 'Typhoon configuration';
        $schema->type = 'object';
        $schema->additionalProperties = false;
        $schema->properties = new stdClass;

        // outputPath
        $outputPath = new stdClass;
        $outputPath->type = 'string';
        $outputPath->title = 'The output path for the classes generated by Typhoon.';
        $outputPath->required = true;
        $schema->properties->outputPath = $outputPath;

        // sourcePaths
        $sourcePaths = new stdClass;
        $sourcePaths->type = 'array';
        $sourcePaths->required = true;
        $sourcePaths->minItems = 1;
        $sourcePaths->uniqueItems = true;
        $sourcePaths->items = new stdClass;
        $sourcePaths->items->type = 'string';
        $sourcePaths->items->title = 'A path containing classes to generate validators for.';
        $schema->properties->sourcePaths = $sourcePaths;

        // loaderPaths
        $loaderPaths = new stdClass;
        $loaderPaths->type = 'array';
        $loaderPaths->minItems = 1;
        $loaderPaths->uniqueItems = true;
        $loaderPaths->items = new stdClass;
        $loaderPaths->items->type = 'string';
        $loaderPaths->items->title = 'A path that can be passed to include() to set up autoloading for the classes in the source path(s).';
        $schema->properties->loaderPaths = $loaderPaths;

        // useNativeCallable
        $useNativeCallable = new stdClass;
        $useNativeCallable->type = 'boolean';
        $useNativeCallable->title = 'Whether to enforce use of the callable type hint.';
        $schema->properties->useNativeCallable = $useNativeCallable;

        return $schema;
    }

    private $schema;
    private $schemaValidator;
    private $typhoon;
}
